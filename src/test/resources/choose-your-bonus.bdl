;;; choose-your-bonus.bdl - example of HW1 in Birdie Lisp.

;; Constants
(defvar *min-salary* 15080)
(defvar *max-salary* 470000)

;; An example of defining a list by using the quote shorthand.
(defvar *option-names*
    '("Option 1: $5,000 annual bonus (no pay increase)"
      "Option 2: 10% annual bonus based on salary (no pay increase)"
      "Option 3: 3% salary increase every year (no bonus)"))

;; An example of using lambdas to dynamically select a method.
(defvar *options*
    '((lambda (Salary)
           ;; $5,000 annual bonus.
           (+ (* 3 Salary) (* 2 5000)))
      (lambda (Salary)
           ;; 10% annual bonus.
           (* 3.2 Salary))
      (lambda (Salary)
           ;; 3% salary increase each year.
           (+
            Salary
            (* 1.03 Salary)
            (* 1.03 1.03 Salary)))))

;; Prompt the user and use the given function. Example of using functions as a
;; first-class values by passing it in the function.
(defun prompt (Dialogue Promptfn)
    (print Dialogue)
    (Promptfn))

;; Return true when a value is between a minimum and maximum.
(defun between? (Min Value Max)
    (<= Min Value Max))

;; Prompt the user for a valid salary.
(defun prompt-salary ()
    ;; Example of a nested function, visible only to the outer function.
    (defun salary-valid? (Salary)
        ;; return true if the salary is between the max and min.
        (between? *min-salary* Salary *max-salary*))

    ;; Set the salary to a naturally invalid number.
    ;; Quirk: `-1` is a symbol, since it doesn't start with a number literal.
    (defvar Salary (- 1))
    (while (not (salary-valid? Salary))
        (setq Salary (prompt "Salary: " read-number))
        ;; Workaround: there is no `if` or `unless` defined yet, so use the
        ;;  low-level `cond` instead.
        (cond
            ((not (salary-valid? Salary))
             (println "The salary must be between $15,080 and $470,000!"))))

     ;; Return the salary.
     Salary)


(defun start ()
    (defvar Fname (prompt "First name: " read-line))
    (defvar Lname (prompt "Last name: " read-line))
    (defvar Salary (prompt-salary))

    (println (concat "Hello, " Fname " " Lname "!"))
    ;; Workaround: `concat` doesn't naturally convert values into strings yet,
    ;;  to use `to-string` manually for now.
    (println (concat "You have $" (to-string Salary) "."))
)

(start)