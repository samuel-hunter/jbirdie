

;; car, cdr utility functions
(defun caar (X)
    (car (car X)))

(defun cadr (X)
    (car (cdr X)))

(defun cdar (X)
    (cdr (car X)))

(defun cddr (X)
    (cdr (cdr X)))

;; Aliases for builtin functions.
(defconst first car)
(defconst rest cdr)
(defconst = eq)

;; List utility functions.

(defun fold (Func Result List)
    "Take a two-argument function Func and fold down List to Result"
    (if (null List)
        Result
        (fold Func (Func Result (first List)) (rest List))))

(defun mapcar (Func List)
    "Process each element in List with Func."
    (if (null List)
        nil
        (cons (Func (first List)) (mapcar Func (rest List)))))

;; Return whether the value is nil.
(defun null (X) (eq X nil))

;; Binary NOT
(defun not (Cond)
    "Return the logical inverse of Cond."
    (cond
        (Cond nil)
        (t t)))

(defmacro and (CondA CondB)
    "Return the second value if both values are truthy."
    (list 'cond (list CondA CondB)))

(defmacro or (CondA CondB)
    "Return t if either value is truthy."
    (list 'cond
        (list CondA t)
        (list CondB t)))

(defmacro if (Cond Truecase . Args)
    "Evaluate the Truecase if Cond is truthy; else, evaluate the second case if
    defined."
    ;; Should return nil if the third case doesn't exist.
    (defconst Falsecase (car Args))
    (list 'cond
        (list Cond Truecase)
        (list t Falsecase)))

(defmacro when (Cond . Body)
    "Evaluate the body if the condition is truthy."
    (list 'cond
        (list Cond (cons 'progn Body))))

(defmacro unless (Cond . Body)
    "Evaluate the body unless the condition is truthy."
    (list 'when (list 'not Cond) (cons 'progn Body)))

(defmacro until (Cond . Body)
    "Keep evaluating the body until the condition is truthy."
    (list 'while (list 'not Cond) (cons 'progn Body)))

;; System utils
(defmacro assert (Cond)
    "Fail the program if Cond is false."
    (list 'unless Cond
        (list 'error "Assertion " (list 'quote Cond) " failed!")))